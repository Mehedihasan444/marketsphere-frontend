import React, { useState } from "react";
import { Rate, Typography, Tooltip, message, Button } from "antd";
import { CheckCircleOutlined, CloseCircleOutlined } from "@ant-design/icons";
import { FaRegHeart, FaHeart, FaStar, FaShippingFast, FaTag } from "react-icons/fa";
import { IoCartOutline, IoEyeOutline, IoLayersOutline, IoFlashOutline } from "react-icons/io5";
import { Link, useNavigate } from "react-router-dom";
import { motion } from "framer-motion";
import { TProduct } from "../../Interface";
import { useAddToCartMutation } from "../../Redux/Features/Cart/cartApi";
import { useAppSelector } from "../../Redux/hook";
import { useAddToWishlistMutation } from "../../Redux/Features/Wishlist/wishlistApi";
import { useAddRecentViewProductMutation } from "../../Redux/Features/RecentViewProducts/recentViewProductsApi";

const { Text } = Typography;

const ProductCard: React.FC<{ product: TProduct }> = ({ product }) => {
  const user = useAppSelector((state) => state.auth.user);
  const [addToCart] = useAddToCartMutation();
  const [addToWishlist] = useAddToWishlistMutation();
  const [isWishlisted, setIsWishlisted] = useState(false);
  const [isHovered, setIsHovered] = useState(false);
  const navigate = useNavigate();
  const [addRecentViewProduct] = useAddRecentViewProductMutation();

  // Calculate discounted price
  const discountedPrice = product.discount > 0 
    ? (product.price - (product.price * product.discount / 100)).toFixed(2)
    : product.price.toFixed(2);

  const savings = product.discount > 0 
    ? (product.price * product.discount / 100).toFixed(2)
    : '0';

  // handle add to cart
  const handleAddToCart = async (e: React.MouseEvent, productId: string) => {
    e.stopPropagation();
    if (!user) {
      message.info("Please login to add product to cart");
    } else {
      try {
        const res = await addToCart({ userEmail: user?.email, productId });

        if (res?.data?.success) {
          message.success("Product added to cart");
        } else if (res.error) {
          if ('data' in res.error) {
            const errorMessage = (res.error.data as { message?: string })?.message || "Product add to cart error occurred.";
            message.error(errorMessage);
          } else if ('message' in res.error) {
            message.error(res.error.message || "Product add to cart error occurred.");
          } else {
            message.error("An unknown error occurred.");
          }
        }
      } catch (error) {
        console.log(error);
        message.error("Failed to add product to cart");
      }
    }
  };

  // Add to wishlist
  const handleAddToWishlist = async (e: React.MouseEvent, productId: string) => {
    e.stopPropagation();
    if (!user) {
      message.info("Please login to add product to wishlist");
    } else {
      try {
        const res = await addToWishlist({ userEmail: user?.email, productId });

        if (res?.data?.success) {
          message.success("Product added to wishlist");
          setIsWishlisted(true);
        } else if (res.error) {
          if ('data' in res.error) {
            const errorMessage = (res.error.data as { message?: string })?.message || "Product add to wishlist error occurred.";
            message.error(errorMessage);
          } else if ('message' in res.error) {
            message.error(res.error.message || "Product add to wishlist error occurred.");
          } else {
            message.error("An unknown error occurred.");
          }
        }
      } catch (error) {
        console.log(error);
        message.error("Failed to add product to wishlist");
      }
    }
  };

  // Add to compare
  const addToCompare = (e: React.MouseEvent) => {
    e.stopPropagation();
    navigate(`/compare-products/${product.id}`);
  };

  // add recent view product
  const handleAddRecentViewProduct = async (productId: string) => {
    try {
      await addRecentViewProduct({ productId });
    } catch (error) {
      console.log(error);
      message.error("Failed to add product to recent view product");
    }
  };

  // Handle card click
  const handleCardClick = () => {
    handleAddRecentViewProduct(product.id);
    navigate(`/products/${product.id}`);
  };

  return (
    <div className="p-2"> {/* max-w-7xl with padding to provide space for hover effects */}
      <motion.div
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ duration: 0.3 }}
        className="group relative bg-white rounded-2xl shadow-sm border border-gray-100 overflow-hidden cursor-pointer transition-all duration-300 ease-out hover:shadow-2xl hover:-translate-y-2 hover:scale-[1.01]"
        onMouseEnter={() => setIsHovered(true)}
        onMouseLeave={() => setIsHovered(false)}
        onClick={handleCardClick}
        style={{ 
          transformOrigin: 'center',
          willChange: 'transform, box-shadow' // Optimize for animations
        }}
      >
      {/* Image Section */}
      <div className="relative overflow-hidden bg-gray-50 rounded-t-2xl">
        {/* Product Image */}
        <div className="relative h-64 w-full">
          <motion.img
            src={product.images[0]}
            alt={product.name}
            className="w-full h-full object-cover transition-transform duration-500 group-hover:scale-110"
            // whileHover={{ scale: 1.1 }}
          />
          
          {/* Gradient Overlay on Hover */}
          <div className={`absolute inset-0 bg-gradient-to-t from-black/20 to-transparent transition-opacity duration-300 ${isHovered ? 'opacity-100' : 'opacity-0'}`} />
        </div>

        {/* Badges */}
        <div className="absolute top-3 left-3 flex flex-col gap-2">
          {product.discount > 0 && (
            <motion.div
              initial={{ scale: 0 }}
              animate={{ scale: 1 }}
              className="bg-gradient-to-r from-red-500 to-pink-500 text-white px-3 py-1 rounded-full text-xs font-bold shadow-lg flex items-center gap-1"
            >
              <FaTag className="text-xs" />
              -{product.discount}%
            </motion.div>
          )}
          
          {product.quantity > 0 && product.quantity < 10 && (
            <div className="bg-gradient-to-r from-orange-500 to-yellow-500 text-white px-3 py-1 rounded-full text-xs font-bold shadow-lg flex items-center gap-1">
              <IoFlashOutline className="text-xs" />
              Low Stock
            </div>
          )}
          
          {product.rating >= 4.5 && (
            <div className="bg-gradient-to-r from-green-500 to-emerald-500 text-white px-3 py-1 rounded-full text-xs font-bold shadow-lg flex items-center gap-1">
              <FaStar className="text-xs" />
              Top Rated
            </div>
          )}
        </div>

        {/* Action Buttons */}
        <div className={`absolute top-3 right-3 flex flex-col gap-2 transition-all duration-300 ${isHovered ? 'opacity-100 translate-x-0' : 'opacity-0 translate-x-4'}`}>
          <Tooltip title="Add to Wishlist" placement="left">
            <motion.button
              whileHover={{ scale: 1.1 }}
              whileTap={{ scale: 0.9 }}
              className={`w-10 h-10 rounded-full flex items-center justify-center shadow-lg transition-all duration-200 ${isWishlisted ? 'bg-red-500 text-white' : 'bg-white/90 backdrop-blur-sm text-gray-700 hover:bg-red-500 hover:text-white'}`}
              onClick={(e) => handleAddToWishlist(e, product.id)}
            >
              {isWishlisted ? <FaHeart className="text-sm" /> : <FaRegHeart className="text-sm" />}
            </motion.button>
          </Tooltip>
          
          <Tooltip title="Quick View" placement="left">
            <Link to={`/products/${product.id}`} onClick={(e) => e.stopPropagation()}>
              <motion.button
                whileHover={{ scale: 1.1 }}
                whileTap={{ scale: 0.9 }}
                className="w-10 h-10 bg-white/90 backdrop-blur-sm rounded-full flex items-center justify-center text-gray-700 hover:bg-blue-500 hover:text-white shadow-lg transition-all duration-200"
              >
                <IoEyeOutline className="text-sm" />
              </motion.button>
            </Link>
          </Tooltip>
          
          <Tooltip title="Compare" placement="left">
            <motion.button
              whileHover={{ scale: 1.1 }}
              whileTap={{ scale: 0.9 }}
              className="w-10 h-10 bg-white/90 backdrop-blur-sm rounded-full flex items-center justify-center text-gray-700 hover:bg-purple-500 hover:text-white shadow-lg transition-all duration-200"
              onClick={addToCompare}
            >
              <IoLayersOutline className="text-sm" />
            </motion.button>
          </Tooltip>
        </div>

        {/* Free Shipping Badge */}
        {product.price > 50 && (
          <div className="absolute bottom-3 left-3">
            <div className="bg-green-500 text-white px-3 py-1 rounded-full text-xs font-semibold shadow-lg flex items-center gap-1">
              <FaShippingFast className="text-xs" />
              Free Shipping
            </div>
          </div>
        )}
      </div>

      {/* Content Section */}
      <div className="p-4 space-y-3">
        {/* Category */}
        {product.category?.name && (
          <Text className="text-xs text-gray-500 uppercase tracking-wide font-medium">
            {product.category.name}
          </Text>
        )}

        {/* Product Name */}
        <h3 className="font-semibold text-gray-900 text-sm line-clamp-2 leading-tight group-hover:text-blue-600 transition-colors duration-200">
          {product.name}
        </h3>

        {/* Rating and Reviews */}
        <div className="flex items-center gap-2">
          <Rate
            disabled
            defaultValue={product.rating}
            className="text-xs"
            style={{ fontSize: '12px' }}
          />
          <Text className="text-xs text-gray-500">
            ({product.reviews?.reviewItems?.length || 0})
          </Text>
          {product.rating >= 4.0 && (
            <span className="text-xs text-green-600 font-medium">
              {product.rating.toFixed(1)}★
            </span>
          )}
        </div>

        {/* Price Section */}
        <div className="space-y-1">
          <div className="flex items-baseline gap-2">
            <span className="text-lg font-bold text-gray-900">
              ${discountedPrice}
            </span>
            {product.discount > 0 && (
              <>
                <span className="text-sm text-gray-400 line-through">
                  ${product.price.toFixed(2)}
                </span>
                <span className="text-xs text-green-600 font-semibold bg-green-50 px-2 py-0.5 rounded-full">
                  Save ${savings}
                </span>
              </>
            )}
          </div>
        </div>

        {/* Stock Status */}
        <div className="flex items-center justify-between">
          <div className="flex items-center gap-1">
            {product.quantity > 0 ? (
              <>
                <CheckCircleOutlined className="text-green-500 text-xs" />
                <Text className="text-xs text-green-600 font-medium">
                  {product.quantity > 20 ? 'In Stock' : `Only ${product.quantity} left`}
                </Text>
              </>
            ) : (
              <>
                <CloseCircleOutlined className="text-red-500 text-xs" />
                <Text className="text-xs text-red-600 font-medium">Out of Stock</Text>
              </>
            )}
          </div>
        </div>

        {/* Add to Cart Button */}
        <motion.div
          initial={{ height: 0, opacity: 0, y: 10 }}
          animate={{ 
            height: isHovered ? 'auto' : 0, 
            opacity: isHovered ? 1 : 0, 
            y: isHovered ? 0 : 10 
          }}
          transition={{ duration: 0.2 }}
          className="overflow-hidden"
          style={{ paddingTop: isHovered ? '8px' : '0px' }}
        >
          <Button
            type="primary"
            block
            size="small"
            icon={<IoCartOutline />}
            onClick={(e) => handleAddToCart(e, product.id)}
            disabled={product.quantity === 0}
            className={`h-9 font-semibold transition-all duration-200 ${
              product.quantity === 0
                ? 'bg-gray-300 border-gray-300 cursor-not-allowed'
                : 'bg-gradient-to-r from-blue-500 to-indigo-500 hover:from-blue-600 hover:to-indigo-600 border-0 shadow-lg hover:shadow-xl'
            }`}
          >
            {product.quantity === 0 ? 'Out of Stock' : 'Add to Cart'}
          </Button>
        </motion.div>
      </div>

      {/* Hover Overlay Effect */}
      <div className={`absolute inset-0 bg-gradient-to-t from-blue-500/5 to-transparent pointer-events-none transition-opacity duration-300 ${isHovered ? 'opacity-100' : 'opacity-0'}`} />
    </motion.div>
    </div>
  );
};
export default ProductCard;
